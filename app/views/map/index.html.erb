 <div id="map">this a map</div>

 <script>
   function escapeHtml(str) {
     var div = document.createElement('div');
     div.appendChild(document.createTextNode(str));
     return div.innerHTML;
   }
   
   var map;
   var service;
   
   /*
   * SET UP THE HUGE MAPS:
   */
   function initMap() {
     var cen = {lat: 40.7625, lng: -73.974167};
     var zum = 3;
     map = new google.maps.Map(document.getElementById('map'), {
       zoom: zum,
       center: cen
     });	
     map.setOptions({ mapTypeId: google.maps.MapTypeId.SATELLITE });

// Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      
   }


   /* 
   * AFTER TEH MAPS, LOOP BOUNTIES AND DRAW THEM:
   */
   $(document).ready(function(){
     $( "#pac-input" ).css( "class", "searchbar" );
     $( "#pac-input" ).focus();

   $( "#road" ).click(function() {
     map.setOptions({ mapTypeId: google.maps.MapTypeId.ROADMAP });
   });
 
   $( "#sat" ).click(function() {
     map.setOptions({ mapTypeId: google.maps.MapTypeId.SATELLITE });
   });

   <% Bounty.all.each do |bounty| %> 
     res_<%= bounty.id %> = 
       $.get("/bounties/<%= bounty.id %>.json").then(function(ub){ 

       b = {};
       for (attr in ub) { 
         if (attr == "lat" || attr == "lng" || attr == "amount") { 
           b[attr] = Number(ub[attr]);
           continue 
         };
         if (typeof(ub[attr]) == "string") {
           b[attr] = escapeHtml(ub[attr]) 
         }
       };

       marker_<%= bounty.id %>  = new google.maps.Marker({
         position: { lat: b.lat, lng: b.lng },
         map: map,
         <% if bounty.artist %>
         label: "a"
         <% else %>
         label: "$"
         <% end %>
       }); 
       marker_<%= bounty.id %>.setMap(map);

       /* 
       * GIVE EACH BOUNTY A NICE INFO WINDOW:
       * (YES, RAW PLAINTEXT FROM JS WAS REALLY THE BEST I COULD DO.
       * LET'S SEE YOU RENDER DATA FROM ASYNC DB QUERIES WITH JS IN RAILS)
       */
       info_<%= bounty.id %> = new google.maps.InfoWindow({
         maxWidth: 400,
         content: 
           "<div class='row tic' style='font-weight:bold'><%= bounty.votes.count %></div>" +
           (`<%= button_to '+', vote_bounty_path(bounty), method: :post, class: "row" %>`) +
           (function(){
             return b.artist ? 
               "<div class='b-p'><img style='min-width:350px'"+
               " class='pic' src='" + b.pic + "'></div>"+
               "<div style='text-align:center'>" + 
               "<div class='b-t'>" + b.title + "</div>" +
               "<div class='b-r'> by " + b.artist + "</div>" +
               "<img style='display: inline-block;margin:auto'" +
               "src='https://chart.googleapis.com/chart?cht=qr&chs=75x75&chl" + 
               b.address + "'>" + "<div class='b-a'>$" + b.amount + "</div>" +
               "<code>" + b.address + "</code></div>" 
             : "<div class='b-a'>$" + b.amount + " </div>" 
            })() +
               "<div class='b-s'><p class='b-d'>" + b.description + "</p></div>" +
               "<p class='b-n'>commissioned by " + (b.patron || 'anonymous') + "</p>" +
               (`<%= button_to 'fill', fill_bounty_path(bounty), method: :post, class: "row" %>`) 
       });

       /* WHEN THEY CLICK THE MARKER, OPEN THE WINDOW.
       * WHEN THEY CLICK IT AGAIN OR HIT ESC, CLOSE IT
       */
       marker_<%= bounty.id %>.addListener('click', function() {
         if (!marker_<%= bounty.id %>.open) {
           info_<%= bounty.id %>.open(map, marker_<%= bounty.id %>);
           marker_<%= bounty.id %>.open = true;
         } else {
           info_<%= bounty.id %>.close();
           marker_<%= bounty.id %>.open = false;
         }
       });

       $(document).on('keyup', function(e) {
         if (e.keyCode == 27 && info_<%=bounty.id%>.open) {
           console.log('esc');
           info_<%= bounty.id %>.close();
         }
       });

     });
   <% end %> 
   <% if params[:id] %>
   console.log('it is working');
   $.get("/bounties/<%= params[:id] %>.json").then(function(ub){  
     map.setCenter({lat: ub.lat, lng: ub.lng});
     map.setZoom(20);
   });
   <% end %>

   });


</script>

<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAYj7nHWwgJgu6r8GVUnbsPPQ0cvmVPunM&callback=initMap&libraries=places"></script>
