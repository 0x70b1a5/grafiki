<% content_for :map do %>
 <div id="map">this a map</div>

 <script>
   function escapeHtml(str) {
     var div = document.createElement('div');
     div.appendChild(document.createTextNode(str));
     return div.innerHTML;
   }
   
   var map;
   var service;
   
   /*
   * SET UP THE HUGE MAPS:
   */
   function initMap() {
     var cen = {lat: 40.7625, lng: -73.974167};
     var zum = 3;
     map = new google.maps.Map(document.getElementById('map'), {
       zoom: zum,
       center: cen
     });	
     map.setOptions({ mapTypeId: google.maps.MapTypeId.SATELLITE });

       /*
       *  SET UP SEARCH BOX
       */
       // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var searchmarkers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          searchmarkers.forEach(function(marker) {
            marker.setMap(null);
          });
          searchmarkers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            searchmarkers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });

/*
 - server side clusterer
    - runs every idle
    - gets coords of current view corners
    - clusters markers, returns clusterflags 
 - infowindows:
    - interior is a div, guid
    - on open, set innerhtml via ajax?
*/

 function drawMarkers(){
   if (window.markers){
     window.markers.forEach(function(marker){ marker.setMap(null); });
   }
   window.markers = [];
   db_response = $.get("/bounties.json").then(function(bounties){ 
     bounties.forEach(function(raw){

       // stringify bounty info from database
       var b = {};
       for (attr in raw) { 
         if (attr=="lat" || attr=="lng" || attr=="amount" || attr=="id") { 
           b[attr] = Number(raw[attr]);
           continue 
         };
         if (typeof(raw[attr]) == "string") {
           b[attr] = escapeHtml(raw[attr]) 
         }
       }; 

       // do not draw this marker if it is outside the view bounds!
       if (!window.bounds.contains(new google.maps.LatLng(b.lat, b.lng))){
         console.log ('skipping '+b.id+": "+b.lat+" "+b.lng);
         return;
       }

       // construct basic marker
       var label = (function(){ return b.artist ? "a" : "$" })();
       var marker = new google.maps.Marker({
         position: { lat: b.lat, lng: b.lng },
         map: map,
         label: label
       }); 

       /* set up the info window shell w/guid */
       var info = new google.maps.InfoWindow({
         maxWidth: 400,
         content: "<div id='marker"+b.id+"'></div>"
       });

       /* WHEN THEY CLICK THE MARKER, OPEN THE INFO WINDOW.
       * MAKE AJAX REQUEST TO GET CONTENTS.
       * WHEN THEY CLICK MARKER AGAIN OR HIT ESC, CLOSE INFO WINDOW */
       marker.addListener('click', function() {
         if (!marker.open) {
           info.open(map, marker);
           marker.open = true;
           var content ;
           $.get("/bounties/"+b.id+".txt").then(function(rendered){ 
             content = rendered;
             $( "#marker"+b.id ).html( content );
           });
         } else {
           info.close();
           marker.open = false;
         }
       });

       // also close if they hit esc
       $(document).on('keyup', function(e) {
         if (e.keyCode == 27 && info.open) {
           info.close();
           marker.open = false;
         }
       });

       // queue marker object for rendering
       markers.push(marker);
     }); // markers finished.

     // break map into grid squares
     var bounds = (function(){
       return window.bounds ? window.bounds : map.getBounds();
     })(),
         ne = bounds.getNorthEast(),
         sw = bounds.getSouthWest();

     // 5*5=25 squares
     var horizStep = (ne.lat() - sw.lat())/5,
         vertiStep = (ne.lng() - sw.lng())/5;

     for (var i=0;i<5;i++){
       for (var j=0;j<5;j++){
         markers.push(new google.maps.Marker({
           position: { lat:sw.lat()+i*horizStep, lng: sw.lng()+j*vertiStep },
           map: map
         }));
       };
     };

     // pass through queued markers & cluster as needed 
     markers.forEach(function(marker){
       /*
         - iterate thru grid squares
         - tally # of markers
         - remove olds from the marker queue
         - replace w/ single cluster marker w/ # label
       */
     });

     // draw all markers
     markers.forEach(function(marker){ marker.setMap(map) });
   });
 }

 <% if params[:id] %>
   $.get("/bounties/<%= params[:id] %>.json").then(function(ub){  
     map.setCenter({lat: ub.lat, lng: ub.lng});
     map.setZoom(20);
   });
 <% end %>
      
 google.maps.event.addListener(map, 'bounds_changed', function() {
   window.bounds = map.getBounds();
 });

 google.maps.event.addListener(map, 'idle', function() {
   drawMarkers();
 });

 /* custom buttons for satellite and road views */
 $(document).ready(function(){
   $( "#pac-input" ).css( "class", "searchbar" );
   $( "#pac-input" ).focus();
   $( "#road" ).click(function() {
     map.setOptions({ mapTypeId: google.maps.MapTypeId.ROADMAP });
   });
   $( "#sat" ).click(function() {
     map.setOptions({ mapTypeId: google.maps.MapTypeId.SATELLITE });
   });
 });

}
 </script>

 <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAYj7nHWwgJgu6r8GVUnbsPPQ0cvmVPunM&callback=initMap&libraries=places"></script>
<% end %>
