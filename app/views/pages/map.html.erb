<!-- TODO map controls? -->
<input id="pac-input" class="normalize-input" type="text" placeholder="Find bounties near...">
<div id="map">Loading map...</div>

<script>
 function escapeHtml(str) {
   var div = document.createElement('div');
   div.appendChild(document.createTextNode(str));
   return div.innerHTML;
 }

 var map;
 var service;

 // SET UP THE HUGE MAPS:
 function initMap() {
   var cen = {lat: 37.8321882116, lng: -122.221084724}
   map = new google.maps.Map(document.getElementById('map'), {
     zoom: 10,
     center: cen,
     disableDefaultUI: true,
     styles: [
       {
         stylers: [
           { invert_lightness: true },
           { saturation: -100 },
           { lightness:  -30 }
         ]
       },
       {
         featureType: 'poi.park',
         elementType: 'labels',
         stylers: [
           { visibility: 'off' }
         ]
       },
       {
         featureType: 'all',
         elementType: 'labels.text.stroke',
         stylers: [
           { lightness: 0 }
         ]
       },
       {
         featureType: 'all',
         elementType: 'labels.text.fill',
         stylers: [
           { lightness: 1 }
         ]
       },
       {
         featureType: 'road',
         elementType: 'labels',
         stylers: [
           { visibility: 'off' }
         ]
       },
       {
         featureType: 'water',
         elementType: 'geometry',
         stylers: [
           { lightness: -90 }
         ]
       },
       {
         featureType: 'landscape.natural.terrain',
         elementType: 'geometry',
         stylers: [
           { visibility: 'off' }
         ]
       }
     ]
   });

   /*
   *  SET UP SEARCH BOX
   */
   // Create the search box and link it to the UI element.
  var input = document.getElementById('pac-input');
  var searchBox = new google.maps.places.SearchBox(input);

  // Bias the SearchBox results towards current map's viewport.
  map.addListener('bounds_changed', function() {
    searchBox.setBounds(map.getBounds());
  });

  var searchmarkers = [];
  // Listen for the event fired when the user selects a prediction and retrieve
  // more details for that place.
  searchBox.addListener('places_changed', function() {
    var places = searchBox.getPlaces();

    if (places.length == 0) {
      return;
    }

    // Clear out the old markers.
    searchmarkers.forEach(function(marker) {
      marker.setMap(null);
    });
    searchmarkers = [];

    // For each place, get the icon, name and location.
    var bounds = new google.maps.LatLngBounds();
    places.forEach(function(place) {
      var icon = {
        url: place.icon,
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(25, 25)
      };

      // Create a marker for each place.
      // searchmarkers.push(new google.maps.Marker({
      //   map: map,
      //   icon: icon,
      //   title: place.name,
      //   position: place.geometry.location
      // }));

      if (place.geometry.viewport) {
        // Only geocodes have viewport.
        bounds.union(place.geometry.viewport);
      } else {
        bounds.extend(place.geometry.location);
      }
    });
    map.fitBounds(bounds);
  });


  window.markers = [];

 function drawMarkers(){
   // first, let the user know we are loading.
   $( "#botflashes" ).html(`<div class="flash load">loading bounties... </div>`);

   // iterate over full db query
   //    restrict to visible:
   var sw = window.bounds.getSouthWest(), ne = window.bounds.getNorthEast();
   db_response = $.get("/bounties.json?"+
     "swlat="+sw.lat()+
    "&swlng="+sw.lng()+
    "&nelat="+ne.lat()+
    "&nelng="+ne.lng()).then(function(bounties){
     bounties.forEach(function(raw){
       // stringify bounty info from database
       var b = {};
       for (attr in raw) {
         if (attr=="lat" || attr=="lng" || attr=="amount" || attr=="id") {
           b[attr] = Number(raw[attr]);
           continue
         };
         if (typeof(raw[attr]) == "string") {
           b[attr] = escapeHtml(raw[attr])
         }
       };

       // do not draw this marker if it is pending review!
       if (b.hidden) { return };

       // construct basic marker
       var marker = new google.maps.Marker({
         position: { lat: b.lat, lng: b.lng }
        ,label: {
          text: (function(){ return b.artist ? "." : "$" })()
         ,color: (function(){ return b.artist ? "#000" : "#000" })()
         ,fontFamily: "Roboto, "+(function(){ return b.artist ? "art" : "sans-serif" })()
         ,fontSize: "18px"
        }
        ,icon: {
           path: google.maps.SymbolPath.CIRCLE
          ,fillColor:   (function(){ return b.artist ? "#0bb" : "#0d0" })()
          ,fillOpacity: 1
          ,strokeColor: (function(){ return b.artist ? "#001" : "#121" })()
          ,strokeWeight: 1
          ,scale: 15
         }
       });

       /* set up the info window shell w/guid */
       var opts = {
         content: "<div class='marker' id='marker"+b.id+"'></div>"
         ,closeBoxURL: ""
       };

       var info = new InfoBox(opts);

       /* WHEN THEY CLICK THE MARKER, OPEN THE INFO WINDOW.
       * MAKE AJAX REQUEST TO GET CONTENTS.
       * WHEN THEY CLICK MARKER AGAIN OR HIT ESC, CLOSE INFO WINDOW */
       marker.addListener('click', function() {
         if (!marker.open) {
           info.open(map, marker);
           marker.open = true;
           window.infosOpen = true;
           $.get("/bounties/"+b.id+".txt").then(function(rendered){
             var info_div = $( "#marker"+b.id );
             console.log(rendered);
             info_div.html( rendered );
             if (info_div.html() != rendered) info_div.html( rendered );
           });
         } else {
           info.close();
           marker.open = false;
           window.infosOpen = false;
         }
       });

       // also close if they hit esc
       $(document).on('keyup', function(e) {
         e.preventDefault();
         if (e.keyCode == 27 && info.open) {
           info.close();
           marker.open = false;
           window.infosOpen = false;
         }
       });

       // queue marker object for rendering
       markers.push(marker);
     }); // markers finished building.

     //
     // cluster markers above certain zoom level:
     //
     if (map.getZoom() < 17) {
     // break map into grid squares
     var bounds = (function(){
       return window.bounds ? window.bounds : map.getBounds();
     })(),
         ne = bounds.getNorthEast(),
         sw = bounds.getSouthWest();

     // sq*sq subsquares
     var sq = 10;
     var horizStep = (ne.lat() - sw.lat())/sq;
         vertiStep = (ne.lng() - sw.lng())/sq;

     for (var i=0;i<sq;i++){
       for (var j=0;j<sq;j++){
         var swlat = sw.lat()+i*horizStep,
             swlng = sw.lng()+j*vertiStep,
             nelat = sw.lat()+(i+1)*horizStep,
             nelng = sw.lng()+(j+1)*vertiStep;

         var miniSW = new google.maps.LatLng(
             { lat: swlat,
               lng: swlng }),
             miniNE = new google.maps.LatLng(
             { lat: nelat,
               lng: nelng });

         var miniBounds = new google.maps.LatLngBounds(miniSW, miniNE);

         var cluster = [];
         for (var k=0;k<markers.length;k++){
           if (markers[k] && miniBounds.contains(markers[k].getPosition())) {
             cluster.push(markers[k]);
             if (cluster.length > 1) delete markers[k];
           }
         };

         if (cluster.length <= 1) continue; // don't mark an empty square!

         var label = String(cluster.length);
         var clustermark = new google.maps.Marker({
           // place clustermarker in center of grid with label # of bounties
           position: {
             lat:sw.lat()+i*horizStep+horizStep/2,
             lng:sw.lng()+j*vertiStep+vertiStep/2
           }
           ,label: {
              text: label
             ,color: "#dde"
             ,fontFamily: "Roboto,sans-serif"
             ,fontSize: "18px"
           }
           ,map: map
           ,icon: {
              path: google.maps.SymbolPath.CIRCLE
             ,fillColor: "#224"
             ,fillOpacity: 1
             ,strokeColor: "#999"
             ,strokeWeight: 1
             ,scale: 17
            }
           ,cluster: true
         });

         clustermark.addListener('click', function(e){
           map.setCenter({
             lat: e.latLng.lat(),
             lng: e.latLng.lng()
           });
           map.setZoom(map.getZoom()+2);
         });

         markers.push(clustermark);
       };
     };
     } else { // map is highly zoomed
       var nothing = null;
     }

     // draw all markers
     markers.forEach(function(marker){
       if (!marker) { return }; // undefined markers not drawn
       marker.setMap(map);
     });

     // hack for art icons
     window.setTimeout(function(){
       var labels = document.querySelectorAll("[style*='art']")
       for (var i = 0; i < labels.length; i++) {
         // Retrieve the custom labels and set the text to an image
         labels[i].innerHTML = `<img style="height:1.1rem" src="/assets/images/spraycan.svg">`;
       }
     }, 500); // TODO: solution that isn't time-based

     // remove loading message; restore map nav
     $( "#botflashes" ).html("");
   });
}

 function clearMarkers() {
   window.markers.forEach(function(m){
     if (m) {
       m.setMap(null);
       delete m;
     }
   });
   var l = window.markers.length;
   for (var i=0;i<l;i++){
     if (!window.markers[i] || window.markers[i].cluster) {
       window.markers = window.markers.splice(0,i).concat(window.markers.splice(i,l));
     }
   };
 }

 <% if params[:id] %>
   $.get("/bounties/<%= params[:id] %>.json").then(function(ub){
     map.setCenter({lat: ub.lat, lng: ub.lng});
     map.setZoom(20);
   });
 <% end %>

 google.maps.event.addListener(map, 'bounds_changed', function() {
   window.bounds = map.getBounds();
 });

 google.maps.event.addListener(map, 'idle', function() {
   if (window.infosOpen) return;
   clearMarkers();
   drawMarkers();
 });
}

</script>

<script type="text/javascript" src="//maps.googleapis.com/maps/api/js?key=AIzaSyAYj7nHWwgJgu6r8GVUnbsPPQ0cvmVPunM&callback=initMap&libraries=places"></script>
<script type="text/javascript" src="//rawgit.com/googlemaps/v3-utility-library/master/infobox/src/infobox.js"></script>
<style>
body {
  overflow: hidden;
}
</style>
